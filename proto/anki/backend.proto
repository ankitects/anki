// Copyright: Ankitects Pty Ltd and contributors
// License: GNU AGPL, version 3 or later; http://www.gnu.org/licenses/agpl.html

syntax = "proto3";

package anki.backend;

import "anki/generic.proto";
import "anki/cards.proto";
import "anki/decks.proto";
import "anki/collection.proto";
import "anki/notes.proto";
import "anki/notetypes.proto";

// Backend methods
///////////////////////////////////////////////////////////

/// while the protobuf descriptors expose the order services are defined in,
/// that information is not available in prost, so we define an enum to make
/// sure all clients agree on the service index
enum ServiceIndex {
  SERVICE_INDEX_SCHEDULING = 0;
  SERVICE_INDEX_DECKS = 1;
  SERVICE_INDEX_NOTES = 2;
  SERVICE_INDEX_SYNC = 3;
  SERVICE_INDEX_NOTETYPES = 4;
  SERVICE_INDEX_CONFIG = 5;
  SERVICE_INDEX_CARD_RENDERING = 6;
  SERVICE_INDEX_DECK_CONFIG = 7;
  SERVICE_INDEX_TAGS = 8;
  SERVICE_INDEX_SEARCH = 9;
  SERVICE_INDEX_STATS = 10;
  SERVICE_INDEX_MEDIA = 11;
  SERVICE_INDEX_I18N = 12;
  SERVICE_INDEX_COLLECTION = 13;
  SERVICE_INDEX_CARDS = 14;
}

service SchedulingService {
  rpc SchedTimingToday(generic.Empty) returns (SchedTimingTodayResponse);
  rpc StudiedToday(generic.Empty) returns (generic.String);
  rpc StudiedTodayMessage(StudiedTodayMessageRequest) returns (generic.String);
  rpc UpdateStats(UpdateStatsRequest) returns (generic.Empty);
  rpc ExtendLimits(ExtendLimitsRequest) returns (generic.Empty);
  rpc CountsForDeckToday(decks.DeckId) returns (CountsForDeckTodayResponse);
  rpc CongratsInfo(generic.Empty) returns (CongratsInfoResponse);
  rpc RestoreBuriedAndSuspendedCards(cards.CardIds)
      returns (collection.OpChanges);
  rpc UnburyDeck(UnburyDeckRequest) returns (collection.OpChanges);
  rpc BuryOrSuspendCards(BuryOrSuspendCardsRequest)
      returns (collection.OpChangesWithCount);
  rpc EmptyFilteredDeck(decks.DeckId) returns (collection.OpChanges);
  rpc RebuildFilteredDeck(decks.DeckId) returns (collection.OpChangesWithCount);
  rpc ScheduleCardsAsNew(ScheduleCardsAsNewRequest)
      returns (collection.OpChanges);
  rpc SetDueDate(SetDueDateRequest) returns (collection.OpChanges);
  rpc SortCards(SortCardsRequest) returns (collection.OpChangesWithCount);
  rpc SortDeck(SortDeckRequest) returns (collection.OpChangesWithCount);
  rpc GetNextCardStates(cards.CardId) returns (NextCardStates);
  rpc DescribeNextStates(NextCardStates) returns (generic.StringList);
  rpc StateIsLeech(SchedulingState) returns (generic.Bool);
  rpc AnswerCard(CardAnswer) returns (collection.OpChanges);
  rpc UpgradeScheduler(generic.Empty) returns (generic.Empty);
  rpc GetQueuedCards(GetQueuedCardsRequest) returns (QueuedCards);
}

service SyncService {
  rpc SyncMedia(SyncAuth) returns (generic.Empty);
  rpc AbortSync(generic.Empty) returns (generic.Empty);
  rpc AbortMediaSync(generic.Empty) returns (generic.Empty);
  rpc BeforeUpload(generic.Empty) returns (generic.Empty);
  rpc SyncLogin(SyncLoginRequest) returns (SyncAuth);
  rpc SyncStatus(SyncAuth) returns (SyncStatusResponse);
  rpc SyncCollection(SyncAuth) returns (SyncCollectionResponse);
  rpc FullUpload(SyncAuth) returns (generic.Empty);
  rpc FullDownload(SyncAuth) returns (generic.Empty);
  rpc SyncServerMethod(SyncServerMethodRequest) returns (generic.Json);
}

service ConfigService {
  rpc GetConfigJson(generic.String) returns (generic.Json);
  rpc SetConfigJson(SetConfigJsonRequest) returns (collection.OpChanges);
  rpc SetConfigJsonNoUndo(SetConfigJsonRequest) returns (generic.Empty);
  rpc RemoveConfig(generic.String) returns (collection.OpChanges);
  rpc GetAllConfig(generic.Empty) returns (generic.Json);
  rpc GetConfigBool(Config.Bool) returns (generic.Bool);
  rpc SetConfigBool(SetConfigBoolRequest) returns (collection.OpChanges);
  rpc GetConfigString(Config.String) returns (generic.String);
  rpc SetConfigString(SetConfigStringRequest) returns (collection.OpChanges);
  rpc GetPreferences(generic.Empty) returns (Preferences);
  rpc SetPreferences(Preferences) returns (collection.OpChanges);
}

service CardRenderingService {
  rpc ExtractAVTags(ExtractAVTagsRequest) returns (ExtractAVTagsResponse);
  rpc ExtractLatex(ExtractLatexRequest) returns (ExtractLatexResponse);
  rpc GetEmptyCards(generic.Empty) returns (EmptyCardsReport);
  rpc RenderExistingCard(RenderExistingCardRequest)
      returns (RenderCardResponse);
  rpc RenderUncommittedCard(RenderUncommittedCardRequest)
      returns (RenderCardResponse);
  rpc RenderUncommittedCardLegacy(RenderUncommittedCardLegacyRequest)
      returns (RenderCardResponse);
  rpc StripAVTags(generic.String) returns (generic.String);
  rpc RenderMarkdown(RenderMarkdownRequest) returns (generic.String);
}

service TagsService {
  rpc ClearUnusedTags(generic.Empty) returns (collection.OpChangesWithCount);
  rpc AllTags(generic.Empty) returns (generic.StringList);
  rpc RemoveTags(generic.String) returns (collection.OpChangesWithCount);
  rpc SetTagCollapsed(SetTagCollapsedRequest) returns (collection.OpChanges);
  rpc TagTree(generic.Empty) returns (TagTreeNode);
  rpc ReparentTags(ReparentTagsRequest) returns (collection.OpChangesWithCount);
  rpc RenameTags(RenameTagsRequest) returns (collection.OpChangesWithCount);
  rpc AddNoteTags(NoteIdsAndTagsRequest)
      returns (collection.OpChangesWithCount);
  rpc RemoveNoteTags(NoteIdsAndTagsRequest)
      returns (collection.OpChangesWithCount);
  rpc FindAndReplaceTag(FindAndReplaceTagRequest)
      returns (collection.OpChangesWithCount);
}

service SearchService {
  rpc BuildSearchString(SearchNode) returns (generic.String);
  rpc SearchCards(SearchRequest) returns (SearchResponse);
  rpc SearchNotes(SearchRequest) returns (SearchResponse);
  rpc JoinSearchNodes(JoinSearchNodesRequest) returns (generic.String);
  rpc ReplaceSearchNode(ReplaceSearchNodeRequest) returns (generic.String);
  rpc FindAndReplace(FindAndReplaceRequest)
      returns (collection.OpChangesWithCount);
  rpc AllBrowserColumns(generic.Empty) returns (BrowserColumns);
  rpc BrowserRowForId(generic.Int64) returns (BrowserRow);
  rpc SetActiveBrowserColumns(generic.StringList) returns (generic.Empty);
}

service StatsService {
  rpc CardStats(cards.CardId) returns (generic.String);
  rpc Graphs(GraphsRequest) returns (GraphsResponse);
  rpc GetGraphPreferences(generic.Empty) returns (GraphPreferences);
  rpc SetGraphPreferences(GraphPreferences) returns (generic.Empty);
}

service MediaService {
  rpc CheckMedia(generic.Empty) returns (CheckMediaResponse);
  rpc TrashMediaFiles(TrashMediaFilesRequest) returns (generic.Empty);
  rpc AddMediaFile(AddMediaFileRequest) returns (generic.String);
  rpc EmptyTrash(generic.Empty) returns (generic.Empty);
  rpc RestoreTrash(generic.Empty) returns (generic.Empty);
}

// Backend
///////////////////////////////////////////////////////////

message BackendInit {
  repeated string preferred_langs = 1;
  string locale_folder_path = 2;
  bool server = 3;
}

message I18nBackendInit {
  repeated string preferred_langs = 4;
  string locale_folder_path = 5;
}

// Errors
///////////////////////////////////////////////////////////

message BackendError {
  enum Kind {
    INVALID_INPUT = 0;
    UNDO_EMPTY = 1;
    INTERRUPTED = 2;
    TEMPLATE_PARSE = 3;
    IO_ERROR = 4;
    DB_ERROR = 5;
    NETWORK_ERROR = 6;
    SYNC_AUTH_ERROR = 7;
    SYNC_OTHER_ERROR = 8;
    JSON_ERROR = 9;
    PROTO_ERROR = 10;
    NOT_FOUND_ERROR = 11;
    EXISTS = 12;
    FILTERED_DECK_ERROR = 13;
    SEARCH_ERROR = 14;
  }

  // localized error description suitable for displaying to the user
  string localized = 1;
  // the error subtype
  Kind kind = 2;
}

// Messages
///////////////////////////////////////////////////////////

message SchedTimingTodayResponse {
  uint32 days_elapsed = 1;
  int64 next_day_at = 2;
}

message RenderExistingCardRequest {
  int64 card_id = 1;
  bool browser = 2;
}

message RenderUncommittedCardRequest {
  notes.Note note = 1;
  uint32 card_ord = 2;
  notetypes.Notetype.Template template = 3;
  bool fill_empty = 4;
}

message RenderUncommittedCardLegacyRequest {
  notes.Note note = 1;
  uint32 card_ord = 2;
  bytes template = 3;
  bool fill_empty = 4;
}

message RenderCardResponse {
  repeated RenderedTemplateNode question_nodes = 1;
  repeated RenderedTemplateNode answer_nodes = 2;
  string css = 3;
  bool latex_svg = 4;
}

message RenderedTemplateNode {
  oneof value {
    string text = 1;
    RenderedTemplateReplacement replacement = 2;
  }
}

message RenderedTemplateReplacement {
  string field_name = 1;
  string current_text = 2;
  repeated string filters = 3;
}

message ExtractAVTagsRequest {
  string text = 1;
  bool question_side = 2;
}

message ExtractAVTagsResponse {
  string text = 1;
  repeated AVTag av_tags = 2;
}

message AVTag {
  oneof value {
    string sound_or_video = 1;
    TTSTag tts = 2;
  }
}

message TTSTag {
  string field_text = 1;
  string lang = 2;
  repeated string voices = 3;
  float speed = 4;
  repeated string other_args = 5;
}

message ExtractLatexRequest {
  string text = 1;
  bool svg = 2;
  bool expand_clozes = 3;
}

message ExtractLatexResponse {
  string text = 1;
  repeated ExtractedLatex latex = 2;
}

message ExtractedLatex {
  string filename = 1;
  string latex_body = 2;
}

message AddMediaFileRequest {
  string desired_name = 1;
  bytes data = 2;
}

message CheckMediaResponse {
  repeated string unused = 1;
  repeated string missing = 2;
  string report = 3;
  bool have_trash = 4;
}

message TrashMediaFilesRequest {
  repeated string fnames = 1;
}

message StudiedTodayMessageRequest {
  uint32 cards = 1;
  double seconds = 2;
}

message CongratsLearnMessageRequest {
  float next_due = 1;
  uint32 remaining = 2;
}

message SearchRequest {
  string search = 1;
  SortOrder order = 2;
}

message SearchResponse {
  repeated int64 ids = 1;
}

message SortOrder {
  message Builtin {
    string column = 1;
    bool reverse = 2;
  }
  oneof value {
    generic.Empty none = 1;
    string custom = 2;
    Builtin builtin = 3;
  }
}

message SearchNode {
  message Dupe {
    int64 notetype_id = 1;
    string first_field = 2;
  }
  enum Flag {
    FLAG_NONE = 0;
    FLAG_ANY = 1;
    FLAG_RED = 2;
    FLAG_ORANGE = 3;
    FLAG_GREEN = 4;
    FLAG_BLUE = 5;
    FLAG_PINK = 6;
    FLAG_TURQUOISE = 7;
    FLAG_PURPLE = 8;
  }
  enum Rating {
    RATING_ANY = 0;
    RATING_AGAIN = 1;
    RATING_HARD = 2;
    RATING_GOOD = 3;
    RATING_EASY = 4;
    RATING_BY_RESCHEDULE = 5;
  }
  message Rated {
    uint32 days = 1;
    Rating rating = 2;
  }
  enum CardState {
    CARD_STATE_NEW = 0;
    CARD_STATE_LEARN = 1;
    CARD_STATE_REVIEW = 2;
    CARD_STATE_DUE = 3;
    CARD_STATE_SUSPENDED = 4;
    CARD_STATE_BURIED = 5;
  }
  message IdList {
    repeated int64 ids = 1;
  }
  message Group {
    enum Joiner {
      AND = 0;
      OR = 1;
    }
    repeated SearchNode nodes = 1;
    Joiner joiner = 2;
  }
  oneof filter {
    Group group = 1;
    SearchNode negated = 2;
    string parsable_text = 3;
    uint32 template = 4;
    int64 nid = 5;
    Dupe dupe = 6;
    string field_name = 7;
    Rated rated = 8;
    uint32 added_in_days = 9;
    int32 due_in_days = 10;
    Flag flag = 11;
    CardState card_state = 12;
    IdList nids = 13;
    uint32 edited_in_days = 14;
    string deck = 15;
    int32 due_on_day = 16;
    string tag = 17;
    string note = 18;
    uint32 introduced_in_days = 19;
  }
}

message JoinSearchNodesRequest {
  SearchNode.Group.Joiner joiner = 1;
  SearchNode existing_node = 2;
  SearchNode additional_node = 3;
}

message ReplaceSearchNodeRequest {
  SearchNode existing_node = 1;
  SearchNode replacement_node = 2;
}

message SetTagCollapsedRequest {
  string name = 1;
  bool collapsed = 2;
}

message GetChangedTagsResponse {
  repeated string tags = 1;
}

message TagTreeNode {
  string name = 1;
  repeated TagTreeNode children = 2;
  uint32 level = 3;
  bool collapsed = 4;
}

message ReparentTagsRequest {
  repeated string tags = 1;
  string new_parent = 2;
}

message RenameTagsRequest {
  string current_prefix = 1;
  string new_prefix = 2;
}

message SetConfigJsonRequest {
  string key = 1;
  bytes value_json = 2;
  bool undoable = 3;
}

message EmptyCardsReport {
  message NoteWithEmptyCards {
    int64 note_id = 1;
    repeated int64 card_ids = 2;
    bool will_delete_note = 3;
  }
  string report = 1;
  repeated NoteWithEmptyCards notes = 2;
}

message FindAndReplaceRequest {
  repeated int64 nids = 1;
  string search = 2;
  string replacement = 3;
  bool regex = 4;
  bool match_case = 5;
  string field_name = 6;
}

message BrowserColumns {
  enum Sorting {
    SORTING_NONE = 0;
    SORTING_NORMAL = 1;
    SORTING_REVERSED = 2;
  }
  enum Alignment {
    ALIGNMENT_START = 0;
    ALIGNMENT_CENTER = 1;
  }
  message Column {
    string key = 1;
    string cards_mode_label = 2;
    string notes_mode_label = 3;
    Sorting sorting = 4;
    bool uses_cell_font = 5;
    Alignment alignment = 6;
  }
  repeated Column columns = 1;
}

message BrowserRow {
  message Cell {
    string text = 1;
    bool is_rtl = 2;
  }
  enum Color {
    COLOR_DEFAULT = 0;
    COLOR_MARKED = 1;
    COLOR_SUSPENDED = 2;
    COLOR_FLAG_RED = 3;
    COLOR_FLAG_ORANGE = 4;
    COLOR_FLAG_GREEN = 5;
    COLOR_FLAG_BLUE = 6;
    COLOR_FLAG_PINK = 7;
    COLOR_FLAG_TURQUOISE = 8;
    COLOR_FLAG_PURPLE = 9;
  }
  repeated Cell cells = 1;
  Color color = 2;
  string font_name = 3;
  uint32 font_size = 4;
}

message NoteIdsAndTagsRequest {
  repeated int64 note_ids = 1;
  string tags = 2;
}

message FindAndReplaceTagRequest {
  repeated int64 note_ids = 1;
  string search = 2;
  string replacement = 3;
  bool regex = 4;
  bool match_case = 5;
}

message Preferences {
  message Scheduling {
    enum NewReviewMix {
      DISTRIBUTE = 0;
      REVIEWS_FIRST = 1;
      NEW_FIRST = 2;
    }

    // read only; 1-3
    uint32 scheduler_version = 1;

    uint32 rollover = 2;
    uint32 learn_ahead_secs = 3;
    NewReviewMix new_review_mix = 4;

    // v2 only
    bool new_timezone = 5;
    bool day_learn_first = 6;
  }
  message Reviewing {
    bool hide_audio_play_buttons = 1;
    bool interrupt_audio_when_answering = 2;
    bool show_remaining_due_counts = 3;
    bool show_intervals_on_buttons = 4;
    uint32 time_limit_secs = 5;
  }
  message Editing {
    bool adding_defaults_to_current_deck = 1;
    bool paste_images_as_png = 2;
    bool paste_strips_formatting = 3;
    string default_search_text = 4;
  }

  Scheduling scheduling = 1;
  Reviewing reviewing = 2;
  Editing editing = 3;
}

message SyncLoginRequest {
  string username = 1;
  string password = 2;
}

message SyncStatusResponse {
  enum Required {
    NO_CHANGES = 0;
    NORMAL_SYNC = 1;
    FULL_SYNC = 2;
  }
  Required required = 1;
}

message SyncCollectionResponse {
  enum ChangesRequired {
    NO_CHANGES = 0;
    NORMAL_SYNC = 1;
    FULL_SYNC = 2;
    // local collection has no cards; upload not an option
    FULL_DOWNLOAD = 3;
    // remote collection has no cards; download not an option
    FULL_UPLOAD = 4;
  }

  uint32 host_number = 1;
  string server_message = 2;
  ChangesRequired required = 3;
}

message SyncAuth {
  string hkey = 1;
  uint32 host_number = 2;
}

message SyncServerMethodRequest {
  enum Method {
    HOST_KEY = 0;
    META = 1;
    START = 2;
    APPLY_GRAVES = 3;
    APPLY_CHANGES = 4;
    CHUNK = 5;
    APPLY_CHUNK = 6;
    SANITY_CHECK = 7;
    FINISH = 8;
    ABORT = 9;
    // caller must reopen after these two are called
    FULL_UPLOAD = 10;
    FULL_DOWNLOAD = 11;
  }
  Method method = 1;
  bytes data = 2;
}

message UpdateStatsRequest {
  int64 deck_id = 1;
  int32 new_delta = 2;
  int32 review_delta = 4;
  int32 millisecond_delta = 5;
}

message ExtendLimitsRequest {
  int64 deck_id = 1;
  int32 new_delta = 2;
  int32 review_delta = 3;
}

message CountsForDeckTodayResponse {
  int32 new = 1;
  int32 review = 2;
}

message GraphsRequest {
  string search = 1;
  uint32 days = 2;
}

message GraphsResponse {
  repeated cards.Card cards = 1;
  repeated RevlogEntry revlog = 2;
  uint32 days_elapsed = 3;
  // Based on rollover hour
  uint32 next_day_at_secs = 4;
  uint32 scheduler_version = 5;
  /// Seconds to add to UTC timestamps to get local time.
  int32 local_offset_secs = 7;
}

message GraphPreferences {
  enum Weekday {
    SUNDAY = 0;
    MONDAY = 1;
    FRIDAY = 5;
    SATURDAY = 6;
  }
  Weekday calendar_first_day_of_week = 1;
  bool card_counts_separate_inactive = 2;
  bool browser_links_supported = 3;
  bool future_due_show_backlog = 4;
}

message RevlogEntry {
  enum ReviewKind {
    LEARNING = 0;
    REVIEW = 1;
    RELEARNING = 2;
    EARLY_REVIEW = 3;
    MANUAL = 4;
  }
  int64 id = 1;
  int64 cid = 2;
  int32 usn = 3;
  uint32 button_chosen = 4;
  int32 interval = 5;
  int32 last_interval = 6;
  uint32 ease_factor = 7;
  uint32 taken_millis = 8;
  ReviewKind review_kind = 9;
}

message CongratsInfoResponse {
  uint32 learn_remaining = 1;
  uint32 secs_until_next_learn = 2;
  bool review_remaining = 3;
  bool new_remaining = 4;
  bool have_sched_buried = 5;
  bool have_user_buried = 6;
  bool is_filtered_deck = 7;
  bool bridge_commands_supported = 8;
  string deck_description = 9;
}

message UnburyDeckRequest {
  enum Mode {
    ALL = 0;
    SCHED_ONLY = 1;
    USER_ONLY = 2;
  }
  int64 deck_id = 1;
  Mode mode = 2;
}

message BuryOrSuspendCardsRequest {
  enum Mode {
    SUSPEND = 0;
    BURY_SCHED = 1;
    BURY_USER = 2;
  }
  repeated int64 card_ids = 1;
  repeated int64 note_ids = 2;
  Mode mode = 3;
}

message ScheduleCardsAsNewRequest {
  repeated int64 card_ids = 1;
  bool log = 2;
}

message SetDueDateRequest {
  repeated int64 card_ids = 1;
  string days = 2;
  Config.String config_key = 3;
}

message SortCardsRequest {
  repeated int64 card_ids = 1;
  uint32 starting_from = 2;
  uint32 step_size = 3;
  bool randomize = 4;
  bool shift_existing = 5;
}

message SortDeckRequest {
  int64 deck_id = 1;
  bool randomize = 2;
}

message Config {
  message Bool {
    enum Key {
      BROWSER_TABLE_SHOW_NOTES_MODE = 0;
      PREVIEW_BOTH_SIDES = 3;
      COLLAPSE_TAGS = 4;
      COLLAPSE_NOTETYPES = 5;
      COLLAPSE_DECKS = 6;
      COLLAPSE_SAVED_SEARCHES = 7;
      COLLAPSE_TODAY = 8;
      COLLAPSE_CARD_STATE = 9;
      COLLAPSE_FLAGS = 10;
      SCHED_2021 = 11;
      ADDING_DEFAULTS_TO_CURRENT_DECK = 12;
      HIDE_AUDIO_PLAY_BUTTONS = 13;
      INTERRUPT_AUDIO_WHEN_ANSWERING = 14;
      PASTE_IMAGES_AS_PNG = 15;
      PASTE_STRIPS_FORMATTING = 16;
      NORMALIZE_NOTE_TEXT = 17;
    }
    Key key = 1;
  }

  message String {
    enum Key {
      SET_DUE_BROWSER = 0;
      SET_DUE_REVIEWER = 1;
      DEFAULT_SEARCH_TEXT = 2;
      CARD_STATE_CUSTOMIZER = 3;
    }
    Key key = 1;
  }
}

message SetConfigBoolRequest {
  Config.Bool.Key key = 1;
  bool value = 2;
  bool undoable = 3;
}

message SetConfigStringRequest {
  Config.String.Key key = 1;
  string value = 2;
  bool undoable = 3;
}

message RenderMarkdownRequest {
  string markdown = 1;
  bool sanitize = 2;
}

message SchedulingState {
  message New {
    uint32 position = 1;
  }
  message Learning {
    uint32 remaining_steps = 1;
    uint32 scheduled_secs = 2;
  }
  message Review {
    uint32 scheduled_days = 1;
    uint32 elapsed_days = 2;
    float ease_factor = 3;
    uint32 lapses = 4;
    bool leeched = 5;
  }
  message Relearning {
    Review review = 1;
    Learning learning = 2;
  }
  message Normal {
    oneof value {
      New new = 1;
      Learning learning = 2;
      Review review = 3;
      Relearning relearning = 4;
    }
  }
  message Preview {
    uint32 scheduled_secs = 1;
    bool finished = 2;
  }
  message ReschedulingFilter {
    Normal original_state = 1;
  }
  message Filtered {
    oneof value {
      Preview preview = 1;
      ReschedulingFilter rescheduling = 2;
    }
  }

  oneof value {
    Normal normal = 1;
    Filtered filtered = 2;
  }
}

message NextCardStates {
  SchedulingState current = 1;
  SchedulingState again = 2;
  SchedulingState hard = 3;
  SchedulingState good = 4;
  SchedulingState easy = 5;
}

message CardAnswer {
  enum Rating {
    AGAIN = 0;
    HARD = 1;
    GOOD = 2;
    EASY = 3;
  }

  int64 card_id = 1;
  SchedulingState current_state = 2;
  SchedulingState new_state = 3;
  Rating rating = 4;
  int64 answered_at_millis = 5;
  uint32 milliseconds_taken = 6;
}

message GetQueuedCardsRequest {
  uint32 fetch_limit = 1;
  bool intraday_learning_only = 2;
}

message QueuedCards {
  enum Queue {
    NEW = 0;
    LEARNING = 1;
    REVIEW = 2;
  }
  message QueuedCard {
    cards.Card card = 1;
    Queue queue = 2;
    NextCardStates next_states = 3;
  }

  repeated QueuedCard cards = 1;
  uint32 new_count = 2;
  uint32 learning_count = 3;
  uint32 review_count = 4;
}
