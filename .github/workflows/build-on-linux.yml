# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
# https://docs.github.com/en/actions/learn-github-actions/expressions#operators
# https://github.com/actions/virtual-environments

name: build-on-linux

concurrency: 
  group: "${{ github.head_ref || github.run_id }}-build-on-linux"
  cancel-in-progress: true

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ tmp4linux, dist4linux ] #tmp4linux for trigger this workflow only
#    paths:
#    - .github/workflows/build-on-l.yml
#  pull_request:
#    branches: [ main ]
  workflow_call:
    inputs:
      buildArgs:
        description: 'buildArgs ie: --test_verbose_timeout_warnings'
        required: false
        type: string
      cacheOn:
        description: 'enable cache'
        required: false
        default: 'true'
        type: string
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      buildArgs:
        description: 'buildArgs ie: --test_verbose_timeout_warnings'
        required: false
        default: '--verbose_failures'
      cacheOn:
        description: 'cacheOn: change to false for disable.'
        required: false
        default: 'true'
      bazelCmd:
        type: choice
        required: false
        description: 'bazelCmd: build/test'
        options:
        - build
        - test

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: cancel previous runs
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
    - uses: actions/checkout@v2
    - name: Cache multiple paths
      uses: actions/cache@v2
      if: ${{ github.event.inputs.cacheOn != 'false'}}
      env:
        cache-name: bazel-cache
      with:
       path: |
         ~/state/bazel/disk
         ~/state/bazel/repo
         ~/state/node_modules
         ~/state/bin
#        !~/cache/exclude
       key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.ref }}
       restore-keys: |
         Linux-${{ env.cache-name }}-refs/heads/main
         macOS-${{ env.cache-name }}-refs/heads/main
         Linux
    - name: install apt packages
      if: true #steps.catche-apt.outputs.cache-hit != 'true'
      run: |
         sudo apt-get update \
            && sudo apt-get install --yes\
            libegl1 \
            libgl1 \
            libgstreamer-gl1.0-0 \
            libgstreamer-plugins-base1.0 \
            libgstreamer1.0-0 \
            libpulse-mainloop-glib0 \
            libxcomposite1 \
            libxcursor1 \
            libxi6 \
            libxkbcommon-x11-0 \
            libxkbcommon0 \
            libxkbfile1	\
            libxrandr2 \
            libxrender1 \
            libxtst6 \
            pkg-config \
            libfontconfig1 \
            libssl-dev \
            libnss3 \
            portaudio19-dev \
            python3-dev

    - name: install bazel
      run: |
        export BAZEL_VERSION=5.0.0
        if [ ! -f ~/state/bin/bazel ] ; then
           mkdir -p  ~/state/bin
           curl -fLo ~/state/bin/bazel "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-linux-x86_64"
           chmod +x ~/state/bin/bazel
        fi
    - name: build
 #     shell: sh
      env:
        RUST_BACKTRACE: 1
      if: ${{ github.event.inputs.bazelCmd == 'build' || github.ref_name == 'dist4linux' }}
      run: |
        #set -x
        export STATE=~/state
        export PATH=~/state/bin:$PATH
        # move existing node_modules into tree
        test -e $STATE/node_modules && mv $STATE/node_modules .
        bazel --output_user_root=$STATE/bazel --output_base=$STATE/bazel/anki build --config opt wheels  --disk_cache=$STATE/bazel/disk --repository_cache=$STATE/bazel/repo ${{ github.event.inputs.buildArgs }}
        file=$(find ~/state/bazel/anki/execroot/ankidesktop/bazel-out -name wheels.tar)
        echo "$file"
        test -f "$file" && mkdir -p .bazel/bin && cp $file ./
        ls -l  .bazel/bin/wheels.tar
    - name: test
 #     shell: sh
      env:
        RUST_BACKTRACE: 1
      if: ${{ github.event.inputs.bazelCmd != 'build' && github.ref_name != 'dist4linux' }}
      run: |
        #set -x
        export STATE=~/state
        export PATH=~/state/bin:$PATH
        # move existing node_modules into tree
        test -e $STATE/node_modules && mv $STATE/node_modules .
        bazel --output_user_root=$STATE/bazel --output_base=$STATE/bazel/anki test --config=ci --disk_cache=$STATE/bazel/disk --repository_cache=$STATE/bazel/repo ${{ github.event.inputs.buildArgs }} ...

    - uses: actions/upload-artifact@v2
      if: ${{ github.event.inputs.bazelCmd == 'build' || github.ref_name == 'dist4linux' }}
      with:
        name: anki-dist-${{ runner.os }}
        path: "./wheels.tar"
